// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: push_notifications.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PushNotificationRegistration_TokenType int32

const (
	PushNotificationRegistration_UNKNOWN_TOKEN_TYPE PushNotificationRegistration_TokenType = 0
	PushNotificationRegistration_APN_TOKEN          PushNotificationRegistration_TokenType = 1
	PushNotificationRegistration_FIREBASE_TOKEN     PushNotificationRegistration_TokenType = 2
)

var PushNotificationRegistration_TokenType_name = map[int32]string{
	0: "UNKNOWN_TOKEN_TYPE",
	1: "APN_TOKEN",
	2: "FIREBASE_TOKEN",
}

var PushNotificationRegistration_TokenType_value = map[string]int32{
	"UNKNOWN_TOKEN_TYPE": 0,
	"APN_TOKEN":          1,
	"FIREBASE_TOKEN":     2,
}

func (x PushNotificationRegistration_TokenType) String() string {
	return proto.EnumName(PushNotificationRegistration_TokenType_name, int32(x))
}

func (PushNotificationRegistration_TokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{0, 0}
}

type PushNotificationRegistrationResponse_ErrorType int32

const (
	PushNotificationRegistrationResponse_UNKNOWN_ERROR_TYPE     PushNotificationRegistrationResponse_ErrorType = 0
	PushNotificationRegistrationResponse_MALFORMED_MESSAGE      PushNotificationRegistrationResponse_ErrorType = 1
	PushNotificationRegistrationResponse_VERSION_MISMATCH       PushNotificationRegistrationResponse_ErrorType = 2
	PushNotificationRegistrationResponse_UNSUPPORTED_TOKEN_TYPE PushNotificationRegistrationResponse_ErrorType = 3
	PushNotificationRegistrationResponse_INTERNAL_ERROR         PushNotificationRegistrationResponse_ErrorType = 4
)

var PushNotificationRegistrationResponse_ErrorType_name = map[int32]string{
	0: "UNKNOWN_ERROR_TYPE",
	1: "MALFORMED_MESSAGE",
	2: "VERSION_MISMATCH",
	3: "UNSUPPORTED_TOKEN_TYPE",
	4: "INTERNAL_ERROR",
}

var PushNotificationRegistrationResponse_ErrorType_value = map[string]int32{
	"UNKNOWN_ERROR_TYPE":     0,
	"MALFORMED_MESSAGE":      1,
	"VERSION_MISMATCH":       2,
	"UNSUPPORTED_TOKEN_TYPE": 3,
	"INTERNAL_ERROR":         4,
}

func (x PushNotificationRegistrationResponse_ErrorType) String() string {
	return proto.EnumName(PushNotificationRegistrationResponse_ErrorType_name, int32(x))
}

func (PushNotificationRegistrationResponse_ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{1, 0}
}

type PushNotification_PushNotificationType int32

const (
	PushNotification_UNKNOWN_PUSH_NOTIFICATION_TYPE PushNotification_PushNotificationType = 0
	PushNotification_MESSAGE                        PushNotification_PushNotificationType = 1
	PushNotification_MENTION                        PushNotification_PushNotificationType = 2
	PushNotification_REQUEST_TO_JOIN_COMMUNITY      PushNotification_PushNotificationType = 3
)

var PushNotification_PushNotificationType_name = map[int32]string{
	0: "UNKNOWN_PUSH_NOTIFICATION_TYPE",
	1: "MESSAGE",
	2: "MENTION",
	3: "REQUEST_TO_JOIN_COMMUNITY",
}

var PushNotification_PushNotificationType_value = map[string]int32{
	"UNKNOWN_PUSH_NOTIFICATION_TYPE": 0,
	"MESSAGE":                        1,
	"MENTION":                        2,
	"REQUEST_TO_JOIN_COMMUNITY":      3,
}

func (x PushNotification_PushNotificationType) String() string {
	return proto.EnumName(PushNotification_PushNotificationType_name, int32(x))
}

func (PushNotification_PushNotificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{6, 0}
}

type PushNotificationReport_ErrorType int32

const (
	PushNotificationReport_UNKNOWN_ERROR_TYPE PushNotificationReport_ErrorType = 0
	PushNotificationReport_WRONG_TOKEN        PushNotificationReport_ErrorType = 1
	PushNotificationReport_INTERNAL_ERROR     PushNotificationReport_ErrorType = 2
	PushNotificationReport_NOT_REGISTERED     PushNotificationReport_ErrorType = 3
)

var PushNotificationReport_ErrorType_name = map[int32]string{
	0: "UNKNOWN_ERROR_TYPE",
	1: "WRONG_TOKEN",
	2: "INTERNAL_ERROR",
	3: "NOT_REGISTERED",
}

var PushNotificationReport_ErrorType_value = map[string]int32{
	"UNKNOWN_ERROR_TYPE": 0,
	"WRONG_TOKEN":        1,
	"INTERNAL_ERROR":     2,
	"NOT_REGISTERED":     3,
}

func (x PushNotificationReport_ErrorType) String() string {
	return proto.EnumName(PushNotificationReport_ErrorType_name, int32(x))
}

func (PushNotificationReport_ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{8, 0}
}

type PushNotificationRegistration struct {
	TokenType               PushNotificationRegistration_TokenType `protobuf:"varint,1,opt,name=token_type,json=tokenType,proto3,enum=protobuf.PushNotificationRegistration_TokenType" json:"token_type,omitempty"`
	DeviceToken             string                                 `protobuf:"bytes,2,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
	InstallationId          string                                 `protobuf:"bytes,3,opt,name=installation_id,json=installationId,proto3" json:"installation_id,omitempty"`
	AccessToken             string                                 `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Enabled                 bool                                   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Version                 uint64                                 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	AllowedKeyList          [][]byte                               `protobuf:"bytes,7,rep,name=allowed_key_list,json=allowedKeyList,proto3" json:"allowed_key_list,omitempty"`
	BlockedChatList         [][]byte                               `protobuf:"bytes,8,rep,name=blocked_chat_list,json=blockedChatList,proto3" json:"blocked_chat_list,omitempty"`
	Unregister              bool                                   `protobuf:"varint,9,opt,name=unregister,proto3" json:"unregister,omitempty"`
	Grant                   []byte                                 `protobuf:"bytes,10,opt,name=grant,proto3" json:"grant,omitempty"`
	AllowFromContactsOnly   bool                                   `protobuf:"varint,11,opt,name=allow_from_contacts_only,json=allowFromContactsOnly,proto3" json:"allow_from_contacts_only,omitempty"`
	ApnTopic                string                                 `protobuf:"bytes,12,opt,name=apn_topic,json=apnTopic,proto3" json:"apn_topic,omitempty"`
	BlockMentions           bool                                   `protobuf:"varint,13,opt,name=block_mentions,json=blockMentions,proto3" json:"block_mentions,omitempty"`
	AllowedMentionsChatList [][]byte                               `protobuf:"bytes,14,rep,name=allowed_mentions_chat_list,json=allowedMentionsChatList,proto3" json:"allowed_mentions_chat_list,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                               `json:"-"`
	XXX_unrecognized        []byte                                 `json:"-"`
	XXX_sizecache           int32                                  `json:"-"`
}

func (m *PushNotificationRegistration) Reset()         { *m = PushNotificationRegistration{} }
func (m *PushNotificationRegistration) String() string { return proto.CompactTextString(m) }
func (*PushNotificationRegistration) ProtoMessage()    {}
func (*PushNotificationRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{0}
}
func (m *PushNotificationRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNotificationRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNotificationRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNotificationRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNotificationRegistration.Merge(m, src)
}
func (m *PushNotificationRegistration) XXX_Size() int {
	return m.Size()
}
func (m *PushNotificationRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNotificationRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_PushNotificationRegistration proto.InternalMessageInfo

func (m *PushNotificationRegistration) GetTokenType() PushNotificationRegistration_TokenType {
	if m != nil {
		return m.TokenType
	}
	return PushNotificationRegistration_UNKNOWN_TOKEN_TYPE
}

func (m *PushNotificationRegistration) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

func (m *PushNotificationRegistration) GetInstallationId() string {
	if m != nil {
		return m.InstallationId
	}
	return ""
}

func (m *PushNotificationRegistration) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *PushNotificationRegistration) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *PushNotificationRegistration) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PushNotificationRegistration) GetAllowedKeyList() [][]byte {
	if m != nil {
		return m.AllowedKeyList
	}
	return nil
}

func (m *PushNotificationRegistration) GetBlockedChatList() [][]byte {
	if m != nil {
		return m.BlockedChatList
	}
	return nil
}

func (m *PushNotificationRegistration) GetUnregister() bool {
	if m != nil {
		return m.Unregister
	}
	return false
}

func (m *PushNotificationRegistration) GetGrant() []byte {
	if m != nil {
		return m.Grant
	}
	return nil
}

func (m *PushNotificationRegistration) GetAllowFromContactsOnly() bool {
	if m != nil {
		return m.AllowFromContactsOnly
	}
	return false
}

func (m *PushNotificationRegistration) GetApnTopic() string {
	if m != nil {
		return m.ApnTopic
	}
	return ""
}

func (m *PushNotificationRegistration) GetBlockMentions() bool {
	if m != nil {
		return m.BlockMentions
	}
	return false
}

func (m *PushNotificationRegistration) GetAllowedMentionsChatList() [][]byte {
	if m != nil {
		return m.AllowedMentionsChatList
	}
	return nil
}

type PushNotificationRegistrationResponse struct {
	Success              bool                                           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error                PushNotificationRegistrationResponse_ErrorType `protobuf:"varint,2,opt,name=error,proto3,enum=protobuf.PushNotificationRegistrationResponse_ErrorType" json:"error,omitempty"`
	RequestId            []byte                                         `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *PushNotificationRegistrationResponse) Reset()         { *m = PushNotificationRegistrationResponse{} }
func (m *PushNotificationRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*PushNotificationRegistrationResponse) ProtoMessage()    {}
func (*PushNotificationRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{1}
}
func (m *PushNotificationRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNotificationRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNotificationRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNotificationRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNotificationRegistrationResponse.Merge(m, src)
}
func (m *PushNotificationRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *PushNotificationRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNotificationRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushNotificationRegistrationResponse proto.InternalMessageInfo

func (m *PushNotificationRegistrationResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PushNotificationRegistrationResponse) GetError() PushNotificationRegistrationResponse_ErrorType {
	if m != nil {
		return m.Error
	}
	return PushNotificationRegistrationResponse_UNKNOWN_ERROR_TYPE
}

func (m *PushNotificationRegistrationResponse) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

type ContactCodeAdvertisement struct {
	PushNotificationInfo []*PushNotificationQueryInfo `protobuf:"bytes,1,rep,name=push_notification_info,json=pushNotificationInfo,proto3" json:"push_notification_info,omitempty"`
	ChatIdentity         *ChatIdentity                `protobuf:"bytes,2,opt,name=chat_identity,json=chatIdentity,proto3" json:"chat_identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ContactCodeAdvertisement) Reset()         { *m = ContactCodeAdvertisement{} }
func (m *ContactCodeAdvertisement) String() string { return proto.CompactTextString(m) }
func (*ContactCodeAdvertisement) ProtoMessage()    {}
func (*ContactCodeAdvertisement) Descriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{2}
}
func (m *ContactCodeAdvertisement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactCodeAdvertisement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactCodeAdvertisement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactCodeAdvertisement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactCodeAdvertisement.Merge(m, src)
}
func (m *ContactCodeAdvertisement) XXX_Size() int {
	return m.Size()
}
func (m *ContactCodeAdvertisement) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactCodeAdvertisement.DiscardUnknown(m)
}

var xxx_messageInfo_ContactCodeAdvertisement proto.InternalMessageInfo

func (m *ContactCodeAdvertisement) GetPushNotificationInfo() []*PushNotificationQueryInfo {
	if m != nil {
		return m.PushNotificationInfo
	}
	return nil
}

func (m *ContactCodeAdvertisement) GetChatIdentity() *ChatIdentity {
	if m != nil {
		return m.ChatIdentity
	}
	return nil
}

type PushNotificationQuery struct {
	PublicKeys           [][]byte `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushNotificationQuery) Reset()         { *m = PushNotificationQuery{} }
func (m *PushNotificationQuery) String() string { return proto.CompactTextString(m) }
func (*PushNotificationQuery) ProtoMessage()    {}
func (*PushNotificationQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{3}
}
func (m *PushNotificationQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNotificationQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNotificationQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNotificationQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNotificationQuery.Merge(m, src)
}
func (m *PushNotificationQuery) XXX_Size() int {
	return m.Size()
}
func (m *PushNotificationQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNotificationQuery.DiscardUnknown(m)
}

var xxx_messageInfo_PushNotificationQuery proto.InternalMessageInfo

func (m *PushNotificationQuery) GetPublicKeys() [][]byte {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

type PushNotificationQueryInfo struct {
	AccessToken          string   `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	InstallationId       string   `protobuf:"bytes,2,opt,name=installation_id,json=installationId,proto3" json:"installation_id,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	AllowedKeyList       [][]byte `protobuf:"bytes,4,rep,name=allowed_key_list,json=allowedKeyList,proto3" json:"allowed_key_list,omitempty"`
	Grant                []byte   `protobuf:"bytes,5,opt,name=grant,proto3" json:"grant,omitempty"`
	Version              uint64   `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	ServerPublicKey      []byte   `protobuf:"bytes,7,opt,name=server_public_key,json=serverPublicKey,proto3" json:"server_public_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushNotificationQueryInfo) Reset()         { *m = PushNotificationQueryInfo{} }
func (m *PushNotificationQueryInfo) String() string { return proto.CompactTextString(m) }
func (*PushNotificationQueryInfo) ProtoMessage()    {}
func (*PushNotificationQueryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{4}
}
func (m *PushNotificationQueryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNotificationQueryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNotificationQueryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNotificationQueryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNotificationQueryInfo.Merge(m, src)
}
func (m *PushNotificationQueryInfo) XXX_Size() int {
	return m.Size()
}
func (m *PushNotificationQueryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNotificationQueryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PushNotificationQueryInfo proto.InternalMessageInfo

func (m *PushNotificationQueryInfo) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *PushNotificationQueryInfo) GetInstallationId() string {
	if m != nil {
		return m.InstallationId
	}
	return ""
}

func (m *PushNotificationQueryInfo) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PushNotificationQueryInfo) GetAllowedKeyList() [][]byte {
	if m != nil {
		return m.AllowedKeyList
	}
	return nil
}

func (m *PushNotificationQueryInfo) GetGrant() []byte {
	if m != nil {
		return m.Grant
	}
	return nil
}

func (m *PushNotificationQueryInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PushNotificationQueryInfo) GetServerPublicKey() []byte {
	if m != nil {
		return m.ServerPublicKey
	}
	return nil
}

type PushNotificationQueryResponse struct {
	Info                 []*PushNotificationQueryInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	MessageId            []byte                       `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Success              bool                         `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PushNotificationQueryResponse) Reset()         { *m = PushNotificationQueryResponse{} }
func (m *PushNotificationQueryResponse) String() string { return proto.CompactTextString(m) }
func (*PushNotificationQueryResponse) ProtoMessage()    {}
func (*PushNotificationQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{5}
}
func (m *PushNotificationQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNotificationQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNotificationQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNotificationQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNotificationQueryResponse.Merge(m, src)
}
func (m *PushNotificationQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *PushNotificationQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNotificationQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushNotificationQueryResponse proto.InternalMessageInfo

func (m *PushNotificationQueryResponse) GetInfo() []*PushNotificationQueryInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *PushNotificationQueryResponse) GetMessageId() []byte {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *PushNotificationQueryResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PushNotification struct {
	AccessToken          string                                `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ChatId               []byte                                `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	PublicKey            []byte                                `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	InstallationId       string                                `protobuf:"bytes,4,opt,name=installation_id,json=installationId,proto3" json:"installation_id,omitempty"`
	Message              []byte                                `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Type                 PushNotification_PushNotificationType `protobuf:"varint,6,opt,name=type,proto3,enum=protobuf.PushNotification_PushNotificationType" json:"type,omitempty"`
	Author               []byte                                `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *PushNotification) Reset()         { *m = PushNotification{} }
func (m *PushNotification) String() string { return proto.CompactTextString(m) }
func (*PushNotification) ProtoMessage()    {}
func (*PushNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{6}
}
func (m *PushNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNotification.Merge(m, src)
}
func (m *PushNotification) XXX_Size() int {
	return m.Size()
}
func (m *PushNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNotification.DiscardUnknown(m)
}

var xxx_messageInfo_PushNotification proto.InternalMessageInfo

func (m *PushNotification) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *PushNotification) GetChatId() []byte {
	if m != nil {
		return m.ChatId
	}
	return nil
}

func (m *PushNotification) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PushNotification) GetInstallationId() string {
	if m != nil {
		return m.InstallationId
	}
	return ""
}

func (m *PushNotification) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PushNotification) GetType() PushNotification_PushNotificationType {
	if m != nil {
		return m.Type
	}
	return PushNotification_UNKNOWN_PUSH_NOTIFICATION_TYPE
}

func (m *PushNotification) GetAuthor() []byte {
	if m != nil {
		return m.Author
	}
	return nil
}

type PushNotificationRequest struct {
	Requests             []*PushNotification `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	MessageId            []byte              `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PushNotificationRequest) Reset()         { *m = PushNotificationRequest{} }
func (m *PushNotificationRequest) String() string { return proto.CompactTextString(m) }
func (*PushNotificationRequest) ProtoMessage()    {}
func (*PushNotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{7}
}
func (m *PushNotificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNotificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNotificationRequest.Merge(m, src)
}
func (m *PushNotificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushNotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushNotificationRequest proto.InternalMessageInfo

func (m *PushNotificationRequest) GetRequests() []*PushNotification {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *PushNotificationRequest) GetMessageId() []byte {
	if m != nil {
		return m.MessageId
	}
	return nil
}

type PushNotificationReport struct {
	Success              bool                             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error                PushNotificationReport_ErrorType `protobuf:"varint,2,opt,name=error,proto3,enum=protobuf.PushNotificationReport_ErrorType" json:"error,omitempty"`
	PublicKey            []byte                           `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	InstallationId       string                           `protobuf:"bytes,4,opt,name=installation_id,json=installationId,proto3" json:"installation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PushNotificationReport) Reset()         { *m = PushNotificationReport{} }
func (m *PushNotificationReport) String() string { return proto.CompactTextString(m) }
func (*PushNotificationReport) ProtoMessage()    {}
func (*PushNotificationReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{8}
}
func (m *PushNotificationReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNotificationReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNotificationReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNotificationReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNotificationReport.Merge(m, src)
}
func (m *PushNotificationReport) XXX_Size() int {
	return m.Size()
}
func (m *PushNotificationReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNotificationReport.DiscardUnknown(m)
}

var xxx_messageInfo_PushNotificationReport proto.InternalMessageInfo

func (m *PushNotificationReport) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PushNotificationReport) GetError() PushNotificationReport_ErrorType {
	if m != nil {
		return m.Error
	}
	return PushNotificationReport_UNKNOWN_ERROR_TYPE
}

func (m *PushNotificationReport) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PushNotificationReport) GetInstallationId() string {
	if m != nil {
		return m.InstallationId
	}
	return ""
}

type PushNotificationResponse struct {
	MessageId            []byte                    `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Reports              []*PushNotificationReport `protobuf:"bytes,2,rep,name=reports,proto3" json:"reports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *PushNotificationResponse) Reset()         { *m = PushNotificationResponse{} }
func (m *PushNotificationResponse) String() string { return proto.CompactTextString(m) }
func (*PushNotificationResponse) ProtoMessage()    {}
func (*PushNotificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_200acd86044eaa5d, []int{9}
}
func (m *PushNotificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNotificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNotificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNotificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNotificationResponse.Merge(m, src)
}
func (m *PushNotificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *PushNotificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNotificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushNotificationResponse proto.InternalMessageInfo

func (m *PushNotificationResponse) GetMessageId() []byte {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *PushNotificationResponse) GetReports() []*PushNotificationReport {
	if m != nil {
		return m.Reports
	}
	return nil
}

func init() {
	proto.RegisterEnum("protobuf.PushNotificationRegistration_TokenType", PushNotificationRegistration_TokenType_name, PushNotificationRegistration_TokenType_value)
	proto.RegisterEnum("protobuf.PushNotificationRegistrationResponse_ErrorType", PushNotificationRegistrationResponse_ErrorType_name, PushNotificationRegistrationResponse_ErrorType_value)
	proto.RegisterEnum("protobuf.PushNotification_PushNotificationType", PushNotification_PushNotificationType_name, PushNotification_PushNotificationType_value)
	proto.RegisterEnum("protobuf.PushNotificationReport_ErrorType", PushNotificationReport_ErrorType_name, PushNotificationReport_ErrorType_value)
	proto.RegisterType((*PushNotificationRegistration)(nil), "protobuf.PushNotificationRegistration")
	proto.RegisterType((*PushNotificationRegistrationResponse)(nil), "protobuf.PushNotificationRegistrationResponse")
	proto.RegisterType((*ContactCodeAdvertisement)(nil), "protobuf.ContactCodeAdvertisement")
	proto.RegisterType((*PushNotificationQuery)(nil), "protobuf.PushNotificationQuery")
	proto.RegisterType((*PushNotificationQueryInfo)(nil), "protobuf.PushNotificationQueryInfo")
	proto.RegisterType((*PushNotificationQueryResponse)(nil), "protobuf.PushNotificationQueryResponse")
	proto.RegisterType((*PushNotification)(nil), "protobuf.PushNotification")
	proto.RegisterType((*PushNotificationRequest)(nil), "protobuf.PushNotificationRequest")
	proto.RegisterType((*PushNotificationReport)(nil), "protobuf.PushNotificationReport")
	proto.RegisterType((*PushNotificationResponse)(nil), "protobuf.PushNotificationResponse")
}

func init() { proto.RegisterFile("push_notifications.proto", fileDescriptor_200acd86044eaa5d) }

var fileDescriptor_200acd86044eaa5d = []byte{
	// 1100 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x5f, 0x27, 0x69, 0x93, 0xbc, 0xa4, 0x69, 0x76, 0xe8, 0x66, 0xbd, 0x85, 0x86, 0x60, 0x40,
	0x44, 0x3d, 0x64, 0x51, 0x91, 0xd8, 0x15, 0xbd, 0x90, 0x4d, 0xdd, 0xae, 0x69, 0x63, 0x67, 0x27,
	0x0e, 0xab, 0x22, 0xa4, 0x91, 0x9b, 0x4c, 0x5b, 0xab, 0xa9, 0x6d, 0x3c, 0x93, 0xa2, 0xdc, 0x10,
	0x67, 0x2e, 0xdc, 0x10, 0x27, 0x3e, 0xc3, 0x7e, 0x0a, 0x8e, 0x7c, 0x04, 0x54, 0xbe, 0x08, 0xf2,
	0x78, 0x9c, 0xba, 0x4d, 0xfa, 0x07, 0x89, 0x53, 0xfc, 0x7e, 0x6f, 0xde, 0x9b, 0x79, 0xef, 0xfd,
	0xde, 0x2f, 0xa0, 0x06, 0x13, 0x76, 0x4a, 0x3c, 0x9f, 0xbb, 0xc7, 0xee, 0xd0, 0xe1, 0xae, 0xef,
	0xb1, 0x56, 0x10, 0xfa, 0xdc, 0x47, 0x05, 0xf1, 0x73, 0x34, 0x39, 0x5e, 0x7f, 0x6f, 0x78, 0xea,
	0x70, 0xe2, 0x8e, 0xa8, 0xc7, 0x5d, 0x3e, 0x8d, 0xdd, 0xda, 0x1f, 0x4b, 0xf0, 0x41, 0x6f, 0xc2,
	0x4e, 0xcd, 0x54, 0x28, 0xa6, 0x27, 0x2e, 0xe3, 0xa1, 0xf8, 0x46, 0x16, 0x00, 0xf7, 0xcf, 0xa8,
	0x47, 0xf8, 0x34, 0xa0, 0xaa, 0xd2, 0x50, 0x9a, 0x95, 0xad, 0xcf, 0x5b, 0x49, 0xd2, 0xd6, 0x5d,
	0xb1, 0x2d, 0x3b, 0x0a, 0xb4, 0xa7, 0x01, 0xc5, 0x45, 0x9e, 0x7c, 0xa2, 0x8f, 0xa0, 0x3c, 0xa2,
	0x17, 0xee, 0x90, 0x12, 0x81, 0xa9, 0x99, 0x86, 0xd2, 0x2c, 0xe2, 0x52, 0x8c, 0x89, 0x08, 0xf4,
	0x19, 0xac, 0xba, 0x1e, 0xe3, 0xce, 0x78, 0x2c, 0xf2, 0x10, 0x77, 0xa4, 0x66, 0xc5, 0xa9, 0x4a,
	0x1a, 0x36, 0x46, 0x51, 0x2e, 0x67, 0x38, 0xa4, 0x8c, 0xc9, 0x5c, 0xb9, 0x38, 0x57, 0x8c, 0xc5,
	0xb9, 0x54, 0xc8, 0x53, 0xcf, 0x39, 0x1a, 0xd3, 0x91, 0xba, 0xd4, 0x50, 0x9a, 0x05, 0x9c, 0x98,
	0x91, 0xe7, 0x82, 0x86, 0xcc, 0xf5, 0x3d, 0x75, 0xb9, 0xa1, 0x34, 0x73, 0x38, 0x31, 0x51, 0x13,
	0xaa, 0xce, 0x78, 0xec, 0xff, 0x48, 0x47, 0xe4, 0x8c, 0x4e, 0xc9, 0xd8, 0x65, 0x5c, 0xcd, 0x37,
	0xb2, 0xcd, 0x32, 0xae, 0x48, 0x7c, 0x9f, 0x4e, 0x0f, 0x5c, 0xc6, 0xd1, 0x26, 0x3c, 0x3e, 0x1a,
	0xfb, 0xc3, 0x33, 0x3a, 0x22, 0xa2, 0xbb, 0xe2, 0x68, 0x41, 0x1c, 0x5d, 0x95, 0x8e, 0xce, 0xa9,
	0xc3, 0xc5, 0xd9, 0x3a, 0xc0, 0xc4, 0x0b, 0x45, 0x7f, 0x68, 0xa8, 0x16, 0xc5, 0x63, 0x52, 0x08,
	0x5a, 0x83, 0xa5, 0x93, 0xd0, 0xf1, 0xb8, 0x0a, 0x0d, 0xa5, 0x59, 0xc6, 0xb1, 0x81, 0x5e, 0x80,
	0x2a, 0xee, 0x24, 0xc7, 0xa1, 0x7f, 0x4e, 0x86, 0xbe, 0xc7, 0x9d, 0x21, 0x67, 0xc4, 0xf7, 0xc6,
	0x53, 0xb5, 0x24, 0x72, 0x3c, 0x11, 0xfe, 0xdd, 0xd0, 0x3f, 0xef, 0x48, 0xaf, 0xe5, 0x8d, 0xa7,
	0xe8, 0x7d, 0x28, 0x3a, 0x81, 0x47, 0xb8, 0x1f, 0xb8, 0x43, 0xb5, 0x2c, 0x1a, 0x53, 0x70, 0x02,
	0xcf, 0x8e, 0x6c, 0xf4, 0x29, 0x54, 0xc4, 0xf3, 0xc8, 0x79, 0xc4, 0x06, 0xdf, 0x63, 0xea, 0x8a,
	0xc8, 0xb5, 0x22, 0xd0, 0xae, 0x04, 0xd1, 0x36, 0xac, 0x27, 0x8d, 0x48, 0x0e, 0xa6, 0xea, 0xac,
	0x88, 0x3a, 0x9f, 0xca, 0x13, 0x49, 0x50, 0x52, 0xaf, 0xb6, 0x0b, 0xc5, 0x19, 0x01, 0x50, 0x0d,
	0xd0, 0xc0, 0xdc, 0x37, 0xad, 0xb7, 0x26, 0xb1, 0xad, 0x7d, 0xdd, 0x24, 0xf6, 0x61, 0x4f, 0xaf,
	0x3e, 0x42, 0x2b, 0x50, 0x6c, 0xf7, 0x24, 0x56, 0x55, 0x10, 0x82, 0xca, 0xae, 0x81, 0xf5, 0x57,
	0xed, 0xbe, 0x2e, 0xb1, 0x8c, 0xf6, 0x2e, 0x03, 0x9f, 0xdc, 0x45, 0x33, 0x4c, 0x59, 0xe0, 0x7b,
	0x8c, 0x46, 0x03, 0x65, 0x13, 0x31, 0x7a, 0xc1, 0xd3, 0x02, 0x4e, 0x4c, 0x64, 0xc2, 0x12, 0x0d,
	0x43, 0x3f, 0x14, 0x64, 0xab, 0x6c, 0xbd, 0x7c, 0x18, 0x7f, 0x93, 0xc4, 0x2d, 0x3d, 0x8a, 0x15,
	0x3c, 0x8e, 0xd3, 0xa0, 0x0d, 0x80, 0x90, 0xfe, 0x30, 0xa1, 0x8c, 0x27, 0xdc, 0x2c, 0xe3, 0xa2,
	0x44, 0x8c, 0x91, 0xf6, 0x93, 0x02, 0xc5, 0x59, 0x4c, 0xba, 0x74, 0x1d, 0x63, 0x0b, 0x27, 0xa5,
	0x3f, 0x81, 0xc7, 0xdd, 0xf6, 0xc1, 0xae, 0x85, 0xbb, 0xfa, 0x0e, 0xe9, 0xea, 0xfd, 0x7e, 0x7b,
	0x4f, 0xaf, 0x2a, 0x68, 0x0d, 0xaa, 0xdf, 0xea, 0xb8, 0x6f, 0x58, 0x26, 0xe9, 0x1a, 0xfd, 0x6e,
	0xdb, 0xee, 0xbc, 0xae, 0x66, 0xd0, 0x3a, 0xd4, 0x06, 0x66, 0x7f, 0xd0, 0xeb, 0x59, 0xd8, 0xd6,
	0x77, 0xd2, 0x3d, 0xcc, 0x46, 0x4d, 0x33, 0x4c, 0x5b, 0xc7, 0x66, 0xfb, 0x20, 0xbe, 0xa1, 0x9a,
	0xd3, 0xde, 0x29, 0xa0, 0x4a, 0x3a, 0x74, 0xfc, 0x11, 0x6d, 0x8f, 0x2e, 0x68, 0xc8, 0x5d, 0x46,
	0xa3, 0x31, 0xa2, 0x43, 0xa8, 0xcd, 0xe9, 0x05, 0x71, 0xbd, 0x63, 0x5f, 0x55, 0x1a, 0xd9, 0x66,
	0x69, 0xeb, 0xe3, 0xdb, 0xfb, 0xf3, 0x66, 0x42, 0xc3, 0xa9, 0xe1, 0x1d, 0xfb, 0x78, 0x2d, 0xb8,
	0xe1, 0x8a, 0x50, 0xb4, 0x0d, 0x2b, 0xd7, 0x64, 0x46, 0x74, 0xbc, 0xb4, 0x55, 0xbb, 0xca, 0x18,
	0xf1, 0xc3, 0x90, 0x5e, 0x5c, 0x1e, 0xa6, 0x2c, 0xed, 0x25, 0x3c, 0x59, 0x78, 0x1f, 0xfa, 0x10,
	0x4a, 0xc1, 0xe4, 0x68, 0xec, 0x0e, 0xa3, 0x7d, 0x64, 0xe2, 0x95, 0x65, 0x0c, 0x31, 0xb4, 0x4f,
	0xa7, 0x4c, 0xfb, 0x25, 0x03, 0xcf, 0x6e, 0x7d, 0xea, 0x9c, 0x4c, 0x28, 0xf3, 0x32, 0xb1, 0x40,
	0x72, 0x32, 0x0b, 0x25, 0x67, 0x03, 0xe0, 0xea, 0x29, 0xc9, 0xe8, 0x67, 0x2f, 0x59, 0x28, 0x1d,
	0xb9, 0x85, 0xd2, 0x31, 0x5b, 0xf7, 0xa5, 0xf4, 0xba, 0xdf, 0x2e, 0x4a, 0x9b, 0xf0, 0x98, 0xd1,
	0xf0, 0x82, 0x86, 0x24, 0x75, 0x7f, 0x5e, 0xc4, 0xae, 0xc6, 0x8e, 0x5e, 0xf2, 0x0a, 0xed, 0x57,
	0x05, 0x36, 0x16, 0xb6, 0x63, 0xb6, 0x2b, 0x2f, 0x20, 0xf7, 0x5f, 0x07, 0x2e, 0x02, 0xa2, 0xfa,
	0xcf, 0x29, 0x63, 0xce, 0x09, 0x4d, 0x7a, 0x54, 0xc6, 0x45, 0x89, 0x18, 0xa3, 0xf4, 0x0e, 0x66,
	0xaf, 0xed, 0xa0, 0xf6, 0x73, 0x16, 0xaa, 0x37, 0x93, 0x3f, 0x64, 0x32, 0x4f, 0x21, 0x2f, 0x19,
	0x25, 0x6f, 0x5b, 0x8e, 0x39, 0x73, 0xdf, 0x24, 0x16, 0x4c, 0x34, 0xb7, 0x70, 0xa2, 0x2a, 0xe4,
	0xe5, 0xfb, 0xe5, 0x28, 0x12, 0x13, 0x75, 0x20, 0x27, 0xfe, 0xf5, 0x96, 0x85, 0x6a, 0x3c, 0xbf,
	0xbd, 0x49, 0x73, 0x80, 0x10, 0x0b, 0x11, 0x8c, 0x6a, 0xb0, 0xec, 0x4c, 0xf8, 0xa9, 0x1f, 0xca,
	0x61, 0x49, 0x4b, 0x63, 0xb0, 0xb6, 0x28, 0x0a, 0x69, 0x50, 0x4f, 0xe4, 0xa2, 0x37, 0xe8, 0xbf,
	0x26, 0xa6, 0x65, 0x1b, 0xbb, 0x46, 0xa7, 0x6d, 0x47, 0x8a, 0x20, 0xa5, 0xa3, 0x04, 0xf9, 0x2b,
	0xc1, 0x10, 0x86, 0x19, 0xb9, 0xab, 0x19, 0xb4, 0x01, 0xcf, 0xb0, 0xfe, 0x66, 0xa0, 0xf7, 0x6d,
	0x62, 0x5b, 0xe4, 0x1b, 0xcb, 0x30, 0x49, 0xc7, 0xea, 0x76, 0x07, 0xa6, 0x61, 0x1f, 0x56, 0xb3,
	0x5a, 0x00, 0x4f, 0xe7, 0x15, 0x4f, 0xc8, 0x16, 0xfa, 0x12, 0x0a, 0x52, 0xc1, 0x98, 0x64, 0xc5,
	0xfa, 0x1d, 0x32, 0x39, 0x3b, 0x7b, 0x0f, 0x21, 0xb4, 0xdf, 0x33, 0x50, 0x9b, 0xbf, 0x32, 0xf0,
	0x43, 0x7e, 0x87, 0x5e, 0x7f, 0x7d, 0x5d, 0xaf, 0x37, 0xef, 0xd2, 0xeb, 0x28, 0xd5, 0x42, 0x85,
	0xfe, 0x3f, 0xc8, 0xa1, 0x7d, 0xff, 0x10, 0x25, 0x5f, 0x85, 0xd2, 0x5b, 0x6c, 0x99, 0x7b, 0xe9,
	0xbf, 0xb1, 0x1b, 0x8a, 0x9c, 0x89, 0x30, 0xd3, 0xb2, 0x09, 0xd6, 0xf7, 0x8c, 0xbe, 0xad, 0x63,
	0x7d, 0xa7, 0x9a, 0xd5, 0x26, 0xa0, 0xce, 0x17, 0x24, 0x37, 0xf4, 0x7a, 0x5f, 0x95, 0x9b, 0x8b,
	0xf6, 0x15, 0xe4, 0x43, 0x51, 0x3b, 0x53, 0x33, 0x62, 0x5a, 0x8d, 0xfb, 0x9a, 0x84, 0x93, 0x80,
	0x57, 0x1b, 0x7f, 0x5e, 0xd6, 0x95, 0xbf, 0x2e, 0xeb, 0xca, 0xdf, 0x97, 0x75, 0xe5, 0xb7, 0x7f,
	0xea, 0x8f, 0xbe, 0x2b, 0xb5, 0x9e, 0x6f, 0x27, 0xe1, 0x47, 0xcb, 0xe2, 0xeb, 0x8b, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xac, 0xc8, 0x42, 0xe2, 0x55, 0x0a, 0x00, 0x00,
}

func (m *PushNotificationRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNotificationRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNotificationRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AllowedMentionsChatList) > 0 {
		for iNdEx := len(m.AllowedMentionsChatList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedMentionsChatList[iNdEx])
			copy(dAtA[i:], m.AllowedMentionsChatList[iNdEx])
			i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.AllowedMentionsChatList[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.BlockMentions {
		i--
		if m.BlockMentions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.ApnTopic) > 0 {
		i -= len(m.ApnTopic)
		copy(dAtA[i:], m.ApnTopic)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.ApnTopic)))
		i--
		dAtA[i] = 0x62
	}
	if m.AllowFromContactsOnly {
		i--
		if m.AllowFromContactsOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Grant) > 0 {
		i -= len(m.Grant)
		copy(dAtA[i:], m.Grant)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.Grant)))
		i--
		dAtA[i] = 0x52
	}
	if m.Unregister {
		i--
		if m.Unregister {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.BlockedChatList) > 0 {
		for iNdEx := len(m.BlockedChatList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockedChatList[iNdEx])
			copy(dAtA[i:], m.BlockedChatList[iNdEx])
			i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.BlockedChatList[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.AllowedKeyList) > 0 {
		for iNdEx := len(m.AllowedKeyList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedKeyList[iNdEx])
			copy(dAtA[i:], m.AllowedKeyList[iNdEx])
			i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.AllowedKeyList[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Version != 0 {
		i = encodeVarintPushNotifications(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x30
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InstallationId) > 0 {
		i -= len(m.InstallationId)
		copy(dAtA[i:], m.InstallationId)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.InstallationId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceToken) > 0 {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.TokenType != 0 {
		i = encodeVarintPushNotifications(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushNotificationRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNotificationRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNotificationRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Error != 0 {
		i = encodeVarintPushNotifications(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContactCodeAdvertisement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactCodeAdvertisement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactCodeAdvertisement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChatIdentity != nil {
		{
			size, err := m.ChatIdentity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushNotifications(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PushNotificationInfo) > 0 {
		for iNdEx := len(m.PushNotificationInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PushNotificationInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPushNotifications(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PushNotificationQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNotificationQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNotificationQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicKeys) > 0 {
		for iNdEx := len(m.PublicKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PublicKeys[iNdEx])
			copy(dAtA[i:], m.PublicKeys[iNdEx])
			i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.PublicKeys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PushNotificationQueryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNotificationQueryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNotificationQueryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServerPublicKey) > 0 {
		i -= len(m.ServerPublicKey)
		copy(dAtA[i:], m.ServerPublicKey)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.ServerPublicKey)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Version != 0 {
		i = encodeVarintPushNotifications(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Grant) > 0 {
		i -= len(m.Grant)
		copy(dAtA[i:], m.Grant)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.Grant)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AllowedKeyList) > 0 {
		for iNdEx := len(m.AllowedKeyList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedKeyList[iNdEx])
			copy(dAtA[i:], m.AllowedKeyList[iNdEx])
			i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.AllowedKeyList[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InstallationId) > 0 {
		i -= len(m.InstallationId)
		copy(dAtA[i:], m.InstallationId)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.InstallationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushNotificationQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNotificationQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNotificationQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPushNotifications(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PushNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Type != 0 {
		i = encodeVarintPushNotifications(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InstallationId) > 0 {
		i -= len(m.InstallationId)
		copy(dAtA[i:], m.InstallationId)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.InstallationId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushNotificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNotificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNotificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPushNotifications(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PushNotificationReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNotificationReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNotificationReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InstallationId) > 0 {
		i -= len(m.InstallationId)
		copy(dAtA[i:], m.InstallationId)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.InstallationId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Error != 0 {
		i = encodeVarintPushNotifications(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushNotificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNotificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNotificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reports) > 0 {
		for iNdEx := len(m.Reports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPushNotifications(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintPushNotifications(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPushNotifications(dAtA []byte, offset int, v uint64) int {
	offset -= sovPushNotifications(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PushNotificationRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenType != 0 {
		n += 1 + sovPushNotifications(uint64(m.TokenType))
	}
	l = len(m.DeviceToken)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	l = len(m.InstallationId)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	if m.Version != 0 {
		n += 1 + sovPushNotifications(uint64(m.Version))
	}
	if len(m.AllowedKeyList) > 0 {
		for _, b := range m.AllowedKeyList {
			l = len(b)
			n += 1 + l + sovPushNotifications(uint64(l))
		}
	}
	if len(m.BlockedChatList) > 0 {
		for _, b := range m.BlockedChatList {
			l = len(b)
			n += 1 + l + sovPushNotifications(uint64(l))
		}
	}
	if m.Unregister {
		n += 2
	}
	l = len(m.Grant)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.AllowFromContactsOnly {
		n += 2
	}
	l = len(m.ApnTopic)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.BlockMentions {
		n += 2
	}
	if len(m.AllowedMentionsChatList) > 0 {
		for _, b := range m.AllowedMentionsChatList {
			l = len(b)
			n += 1 + l + sovPushNotifications(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushNotificationRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovPushNotifications(uint64(m.Error))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContactCodeAdvertisement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PushNotificationInfo) > 0 {
		for _, e := range m.PushNotificationInfo {
			l = e.Size()
			n += 1 + l + sovPushNotifications(uint64(l))
		}
	}
	if m.ChatIdentity != nil {
		l = m.ChatIdentity.Size()
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushNotificationQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublicKeys) > 0 {
		for _, b := range m.PublicKeys {
			l = len(b)
			n += 1 + l + sovPushNotifications(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushNotificationQueryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	l = len(m.InstallationId)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if len(m.AllowedKeyList) > 0 {
		for _, b := range m.AllowedKeyList {
			l = len(b)
			n += 1 + l + sovPushNotifications(uint64(l))
		}
	}
	l = len(m.Grant)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovPushNotifications(uint64(m.Version))
	}
	l = len(m.ServerPublicKey)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushNotificationQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovPushNotifications(uint64(l))
		}
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	l = len(m.InstallationId)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPushNotifications(uint64(m.Type))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushNotificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovPushNotifications(uint64(l))
		}
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushNotificationReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovPushNotifications(uint64(m.Error))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	l = len(m.InstallationId)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushNotificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovPushNotifications(uint64(l))
	}
	if len(m.Reports) > 0 {
		for _, e := range m.Reports {
			l = e.Size()
			n += 1 + l + sovPushNotifications(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPushNotifications(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPushNotifications(x uint64) (n int) {
	return sovPushNotifications(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PushNotificationRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushNotifications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNotificationRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNotificationRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= PushNotificationRegistration_TokenType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedKeyList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedKeyList = append(m.AllowedKeyList, make([]byte, postIndex-iNdEx))
			copy(m.AllowedKeyList[len(m.AllowedKeyList)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedChatList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedChatList = append(m.BlockedChatList, make([]byte, postIndex-iNdEx))
			copy(m.BlockedChatList[len(m.BlockedChatList)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unregister", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unregister = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grant", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grant = append(m.Grant[:0], dAtA[iNdEx:postIndex]...)
			if m.Grant == nil {
				m.Grant = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFromContactsOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFromContactsOnly = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApnTopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApnTopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockMentions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BlockMentions = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedMentionsChatList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedMentionsChatList = append(m.AllowedMentionsChatList, make([]byte, postIndex-iNdEx))
			copy(m.AllowedMentionsChatList[len(m.AllowedMentionsChatList)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushNotifications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushNotificationRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushNotifications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNotificationRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNotificationRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= PushNotificationRegistrationResponse_ErrorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = append(m.RequestId[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestId == nil {
				m.RequestId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushNotifications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactCodeAdvertisement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushNotifications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactCodeAdvertisement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactCodeAdvertisement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushNotificationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushNotificationInfo = append(m.PushNotificationInfo, &PushNotificationQueryInfo{})
			if err := m.PushNotificationInfo[len(m.PushNotificationInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatIdentity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChatIdentity == nil {
				m.ChatIdentity = &ChatIdentity{}
			}
			if err := m.ChatIdentity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushNotifications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushNotificationQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushNotifications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNotificationQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNotificationQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeys = append(m.PublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.PublicKeys[len(m.PublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushNotifications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushNotificationQueryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushNotifications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNotificationQueryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNotificationQueryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedKeyList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedKeyList = append(m.AllowedKeyList, make([]byte, postIndex-iNdEx))
			copy(m.AllowedKeyList[len(m.AllowedKeyList)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grant", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grant = append(m.Grant[:0], dAtA[iNdEx:postIndex]...)
			if m.Grant == nil {
				m.Grant = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerPublicKey = append(m.ServerPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerPublicKey == nil {
				m.ServerPublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushNotifications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushNotificationQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushNotifications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNotificationQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNotificationQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &PushNotificationQueryInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = append(m.MessageId[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageId == nil {
				m.MessageId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPushNotifications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushNotifications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = append(m.ChatId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChatId == nil {
				m.ChatId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PushNotification_PushNotificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = append(m.Author[:0], dAtA[iNdEx:postIndex]...)
			if m.Author == nil {
				m.Author = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushNotifications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushNotificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushNotifications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNotificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNotificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &PushNotification{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = append(m.MessageId[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageId == nil {
				m.MessageId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushNotifications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushNotificationReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushNotifications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNotificationReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNotificationReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= PushNotificationReport_ErrorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushNotifications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushNotificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushNotifications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNotificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNotificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = append(m.MessageId[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageId == nil {
				m.MessageId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushNotifications
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reports = append(m.Reports, &PushNotificationReport{})
			if err := m.Reports[len(m.Reports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushNotifications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushNotifications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPushNotifications(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPushNotifications
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushNotifications
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPushNotifications
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPushNotifications
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPushNotifications
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPushNotifications        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPushNotifications          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPushNotifications = fmt.Errorf("proto: unexpected end of group")
)
